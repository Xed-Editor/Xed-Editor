name: Android CI

on:
  push:
    branches:
      - main
      - dev
    paths-ignore:
      - "**/*.md"
  workflow_dispatch:

jobs:
  build-release:
    name: Build Release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all tags for comparison

      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          java-version: "17"
          distribution: "temurin"
          cache: gradle

      - name: Decode and create xed.keystore
        run: echo "${{ secrets.KEYSTORE }}" | base64 -d > /tmp/xed.keystore

      - name: Decode and create signing.properties
        run: echo "${{ secrets.PROP }}" | base64 -d > /tmp/signing.properties

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Set Commit Hash
        id: commit_hash
        run: echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Extract Current versionCode
        id: version_code
        run: echo "VERSION_CODE=$(grep -oP 'versionCode\s*=\s*\K\d+' app/build.gradle.kts)" >> $GITHUB_ENV

      - name: Extract Previous versionCode
        id: prev_version_code
        run: echo "PREV_VERSION_CODE=$(git show HEAD~1:app/build.gradle.kts | grep -oP 'versionCode\s*=\s*\K\d+' || echo 0)" >> $GITHUB_ENV

      - name: Extract versionName
        id: version_name
        run: echo "VERSION_NAME=$(grep -oP 'versionName\s*=\s*\"\K[^\"]+' app/build.gradle.kts)" >> $GITHUB_ENV

      - name: Get Previous Tag
        id: prev_tag
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 || git rev-list --max-parents=0 HEAD)
          echo "Previous tag: $PREV_TAG"
          echo "PREV_TAG=$PREV_TAG" >> $GITHUB_ENV

      - name: Compare Version Codes
        id: check_version_change
        run: |
          echo "Current versionCode: $VERSION_CODE"
          echo "Previous versionCode: $PREV_VERSION_CODE"
          if [ "$VERSION_CODE" -gt "$PREV_VERSION_CODE" ]; then
            echo "VERSION_CHANGED=true" >> $GITHUB_ENV
          else
            echo "VERSION_CHANGED=false" >> $GITHUB_ENV
          fi

      - name: Build with Gradle
        run: ./gradlew assembleFdroidRelease && mv app/build/outputs/apk/Fdroid/release/*.apk app/xed-editor-${{ env.COMMIT_HASH }}.apk
        env:
          KEYSTORE_FILE: /tmp/xed.keystore
          SIGNING_PROPERTIES_FILE: /tmp/signing.properties
        continue-on-error: true

      - name: Archive APK
        uses: actions/upload-artifact@v4
        with:
          name: Xed-Editor-Release
          path: app/xed-editor-${{ env.COMMIT_HASH }}.apk

      - name: Delete xed.keystore and signing.properties
        run: rm /tmp/xed.keystore /tmp/signing.properties

      - name: Send APK to Telegram
        if: ${{ success() && github.event.head_commit.message != '' }}
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument" \
          -F chat_id="-1002408175863" \
          -F message_thread_id="582" \
          -F caption="${{ github.event.head_commit.message }}" \
          -F document=@"app/xed-editor-${{ env.COMMIT_HASH }}.apk"

      - name: Process Build
        run: |
          find . -type d -name "build" > build_directories.txt
          tar -czf build_directories.tar.gz -T build_directories.txt
          curl bashupload.com -T build_directories.tar.gz > output.txt
          cat output.txt

      - name: Trigger Build Artifact Workflow
        run: |
          ARTIFACT_URL=$(grep -oE '(http|https)://[^ ]+' output.txt | head -n 1)

          if [[ -z "$ARTIFACT_URL" ]]; then
            echo "Error: Failed to extract artifact URL."
            exit 1
          fi

          PAYLOAD=$(jq -n \
            --arg url "$ARTIFACT_URL" \
            '{event_type: "build_artifact_trigger", client_payload: {artifact_url: $url}}')

          echo "Payload to be sent:"
          echo "$PAYLOAD"

          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.PLUGIN_SDK_PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            https://api.github.com/repos/Xed-Editor/Xed-Editor-Sdk/dispatches
      
      

      - name: Fail if release commit does not bump versionCode
        if: startsWith(github.event.head_commit.message, 'release') && env.VERSION_CHANGED != 'true'
        run: |
          echo "Error: Release commit must bump versionCode."
          exit 1

      - name: Check Commit Message and Create Pre-Release
        if: startsWith(github.event.head_commit.message, 'release') && env.VERSION_CHANGED == 'true'
        run: |
          TAG_NAME="v${{ env.VERSION_NAME }}"
          RELEASE_NAME="Xed-Editor $TAG_NAME"
          BRANCH_NAME="${{ github.ref_name }}"
          COMPARE_URL="https://github.com/${{ github.repository }}/compare/${{ env.PREV_TAG }}...${{ github.sha }}"

          UPLOAD_URL=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{\"tag_name\":\"$TAG_NAME\",\"target_commitish\":\"$BRANCH_NAME\",\"name\":\"$RELEASE_NAME\",\"body\":\"Automated pre-release for commit: ${{ github.event.head_commit.message }}\n\n[Compare Changes]($COMPARE_URL)\",\"draft\":false,\"prerelease\":true}" \
            https://api.github.com/repos/${{ github.repository }}/releases | jq -r .upload_url | sed 's/{?name,label}//')

          if [[ -z "$UPLOAD_URL" || "$UPLOAD_URL" == "null" ]]; then
            echo "Error: Failed to create release."
            exit 1
          fi

          curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/vnd.android.package-archive" \
            --data-binary @app/xed-editor-${{ env.COMMIT_HASH }}.apk \
            "$UPLOAD_URL?name=xed-editor-v${{ env.VERSION_NAME }}.apk"
